import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Set;
import org.jgrapht.graph.*;


public class CreateGraph {
	
		/* 
		The getGraph function parses the dot file generated by frama-c and creates a new graph object
		The structure of the dot file is exploited to create the graph object
		*/

    public static GraphInfo<GraphInfo.CustomVertex, GraphInfo.RelationshipEdge>  getGraph(String filePath) {
    	GraphInfo<GraphInfo.CustomVertex, GraphInfo.RelationshipEdge> graph =
                new GraphInfo< GraphInfo.CustomVertex,GraphInfo.RelationshipEdge>(
                        new ClassBasedEdgeFactory<GraphInfo.CustomVertex, GraphInfo.RelationshipEdge>(GraphInfo.RelationshipEdge.class));
    	
    	try {
    		int i=3;
			List<String> lines = Files.readAllLines(Paths.get(filePath));
			while( i <lines.size()){
				String[] tokens= lines.get(i).split("\\s+");
				if(tokens.length==0){
					i++;
					continue;
				}				
				else if(tokens[1].contains("subgraph")){
					i=i+3;
					String[] buffer=lines.get(i).split("\\s+");
					graph.addVertex( new GraphInfo.CustomVertex(Integer.parseInt(buffer[1].substring(0,buffer[1].length()-1)),"Call-Site"));
					graph.setNumOfCallSiteNodes(graph.getNumOfCallSiteNodes()+1);
				}
				else if(tokens[1].equals("edge")){
					i++;
					break;
				}
				else{
					if(tokens[2].contains("diamond")){
					graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Control"));
					graph.setNumOfControlNodes(graph.getNumOfControlNodes()+1);
					}
					else if(tokens[2].contains("doublecircle")){
						if(tokens[4].contains("while")){
							graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Loop"));
							graph.setNumOfLoopNodes(graph.getNumOfLoopNodes()+1);
						}
						else if(tokens[4].contains("break")||tokens[4].contains("goto")){
							graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Jump"));	
							graph.setNumOfJumpNodes(graph.getNumOfJumpNodes()+1);
						}
					}
					else if(tokens[2].contains("box")){
						if(tokens[4].contains("Decl")){
							graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Declaration"));
							graph.setNumOfDeclarationNodes(graph.getNumOfDeclarationNodes()+1);
						}
						if(tokens.length>9){
							if(tokens[9].contains("++")||tokens[9].contains("--")){
								graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Increment"));
								graph.setNumOfIncrementNodes(graph.getNumOfIncrementNodes()+1);
							}
						}
						if (tokens.length>6 && tokens[5].equals("=")){
							graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Assignment"));
							graph.setNumOfAssignmentNodes(graph.getNumOfAssignmentNodes()+1);
						}
						if ( tokens.length>5 ){
							if (tokens[5].contains("++") || tokens[5].contains("--")){
								graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Increment"));
								graph.setNumOfIncrementNodes(graph.getNumOfIncrementNodes()+1);
							}
						}
						if (tokens[4].contains("return") || tokens[4].contains("Ret")){
							graph.addVertex(new GraphInfo.CustomVertex(Integer.parseInt(tokens[1]),"Return"));
							graph.setNumOfReturnNodes(graph.getNumOfReturnNodes()+1);
						}
					}
				}				
				i++;
			}
			Set<GraphInfo.CustomVertex> v=graph.vertexSet();
			while( i <lines.size()){
					String[] tokens= lines.get(i).split("\\s+");
					if(tokens.length==0){
						break;
					}
					
					if (tokens[4].contains("arrowtail")) {
						GraphInfo.CustomVertex v1=GraphInfo.getVertex(v,tokens[1]);
						GraphInfo.CustomVertex v2=GraphInfo.getVertex(v,tokens[3]);
						if(v1!=null && v2!=null){
						graph.addEdge(v1,v2,
								new GraphInfo.RelationshipEdge<String>((v1.getNodeId()),(v2.getNodeId()), "Control"));
						graph.setNumOfControlEdges(graph.getNumOfControlEdges()+1);//adding a new control edge
						}
					}
					else{
						GraphInfo.CustomVertex v1=GraphInfo.getVertex(v,tokens[1]);
						GraphInfo.CustomVertex v2=GraphInfo.getVertex(v,tokens[3]);
						if(v1!=null && v2!=null){
						graph.addEdge(v1,v2,
								new GraphInfo.RelationshipEdge<String>((v1.getNodeId()),(v2.getNodeId()), "Data"));
						graph.setNumOfDataEdges(graph.getNumOfDataEdges()+1);// adding a new data dependency edge
						}
					}
				i++;
			}
			
			
    	} catch (IOException e) {
			e.printStackTrace();
		}  
    	return graph;
    }
}
