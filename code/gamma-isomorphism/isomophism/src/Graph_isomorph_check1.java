import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.jgrapht.*;
import org.jgrapht.alg.isomorphism.*;
import org.jgrapht.graph.*;

public class Graph_isomorph_check1 {
	static int K_filter = 8; // the parameter 'K' should be adjusted based on the program size
     /*
     * Command line arguments should be passed by changing the run configuration
     *  of the Graph_isomorphism_check1 file.
     * Go to Run Menu and then select "Run configuration". Click on the arguments tab in the dialog box that has opened.
     * Write the arguments in the program arguments input box and then click on run.
     */
    public static void main(String[] args) {
			/*
			* The dot files generated by frama-c are passed as command line arguments
			* Example of dot file: graph.main.dot
			*/
    	if(args.length==2){
      // graph1 is the PDG generated for correct solution
    	GraphInfo<GraphInfo.CustomVertex, GraphInfo.RelationshipEdge> graph1= CreateGraph.getGraph(args[0]);
			// graph2 is the PDG generated for student submission
    	GraphInfo<GraphInfo.CustomVertex, GraphInfo.RelationshipEdge> graph2= CreateGraph.getGraph(args[1]);
			// passing the PDGs to the filter
    	if (Filter(graph1,graph2,K_filter)){
    			int length=graph1.vertexSet().size();
					// Creating a set which contains all vertices of graph1
    			Set<GraphInfo.CustomVertex> vertices=graph1.vertexSet();
        		List<GraphInfo.CustomVertex> superSet = new ArrayList<>();
        		superSet.addAll(vertices);
        		
    			System.out.println("Filter :true");
    			double gamma=0.8; // Gamma isomorphism parameter
    			while(length>gamma*graph1.vertexSet().size()){
    				int flag=0;
						// generate subsets for the vertex superset of a given length
    				List<Set<GraphInfo.CustomVertex>> res=Combination.getSubsets(superSet,length);
    				for (int j = 0; j < res.size(); j++) {

    					Subgraph<GraphInfo.CustomVertex,GraphInfo.RelationshipEdge,DirectedGraph<GraphInfo.CustomVertex,GraphInfo.RelationshipEdge>> subg= new DirectedSubgraph(graph1,res.get(j)); // creates a subgraph from vertex set using the graph
							// Checking for subgraph isomorphism
    					VF2SubgraphIsomorphismInspector<GraphInfo.CustomVertex,GraphInfo.RelationshipEdge> insp=new VF2SubgraphIsomorphismInspector<GraphInfo.CustomVertex,GraphInfo.RelationshipEdge>(graph2,subg,new VertexComparator(),new EdgeComparator());
    					if(insp.isomorphismExists()){
    						flag=1;
    						System.out.println("Is isomorphic");
    						break;
    					}
    				}
    				if(flag==1)
    					break;
    				length--;
    				System.out.println("Length:"+length);
    			}
    		}
    	}
    	else{
    		System.out.println("Print enter command line arguments in the following format:\n" +
    				"<dot-file of correct solution>  <dot-file of student submission>");
    	}
    			
    }
    

    // Assuming that g1 is a PDG of the original solution and g2 is a PDG of the plagiarism suspect solution      
    public static boolean Filter(GraphInfo<GraphInfo.CustomVertex,GraphInfo.RelationshipEdge> g1,GraphInfo<GraphInfo.CustomVertex,GraphInfo.RelationshipEdge> g2,int K_filter){
    	double gamma=0.8;
			//Size-filter
    	if( (g1.vertexSet()).size() > K_filter && (g2.vertexSet().size() >K_filter) )  {
    		System.out.println("passed 1st filter");
				// Filter based on gamma isomorphism criterion
    		if ( g2.vertexSet().size() >=  gamma*(g1.vertexSet().size()) &&  g2.vertexSet().size() <=  1.5*(g1.vertexSet().size()) ){
	    			return true;
	    		}
    		}	
		return false;  	
    }
  	
    // Criteria for vertices to be considered similar while checking for subgraph isomorphism
    public static class VertexComparator<CustomVertex> implements Comparator<GraphInfo.CustomVertex>{
		public int compare(GraphInfo.CustomVertex v1, GraphInfo.CustomVertex v2) {
			if(v1.getType() == v2.getType())
				return 0;
			else
				return 1;
		} 
    }
   
 // Criteria for edges to be considered similar while checking for subgraph isomorphism
   public static class EdgeComparator<RelationshipEdge> implements Comparator<GraphInfo.RelationshipEdge>{
		public int compare(GraphInfo.RelationshipEdge e1,GraphInfo.RelationshipEdge e2) {
			if(e1.getType() == e2.getType())
				return 0;
			else
				return 1;
		}
   }      
}
